name: Release & Publish

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Run full CI suite
        run: |
          npm run format -- --check
          npm run lint
          npm run test -- --coverage --watchAll=false

      - name: Build library
        run: npm run build

      - name: Check for version changes
        id: version_check
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
            OLD_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
            NEW_VERSION=$(jq -r '.version' package.json)
            if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump version (manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push
        id: manual_version

      - name: Create GitHub Release
        if: steps.version_check.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_check.outputs.new_version || steps.manual_version.outputs.new_version }}
          release_name:
            Release v${{ steps.version_check.outputs.new_version || steps.manual_version.outputs.new_version }}
          draft: false
          prerelease:
            ${{ contains(steps.version_check.outputs.new_version || steps.manual_version.outputs.new_version, 'beta') ||
            contains(steps.version_check.outputs.new_version || steps.manual_version.outputs.new_version, 'alpha') }}

      - name: Publish to npm
        if: steps.version_check.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ steps.version_check.outputs.new_version || steps.manual_version.outputs.new_version }}" == *"beta"* ]] || [[ "${{ steps.version_check.outputs.new_version || steps.manual_version.outputs.new_version }}" == *"alpha"* ]]; then
            npm publish --tag beta
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.tgz
